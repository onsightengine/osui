/***** GRAPH *****/

.GraphInput, .GraphGrid, .GraphNodes, .GraphLines {
    position: absolute;
    top: 0;
	left: 0;
    width: 100%;
    height: 100%;
	margin: 0;
	padding: 0;
}

/* Div used for processing user input */
.GraphInput {
    background: transparent;
    z-index: -1; /* GraphInput */
}

/* Background div that holds tiled grid */
.GraphGrid {
    pointer-events: none;
    background-color: rgb(var(--darkness));
    background-repeat: repeat;
    transition: none;
}

/* Scalable div to hold nodes */
.GraphNodes {
    pointer-events: none;
    background-color: transparent;
    transition: none;
}

/* Canvas where lines are drawn */
.GraphLines {
    pointer-events: none;
}

/* Shows rubber band box */
.GraphBandBox {
    position: absolute;
    display: none;
    background-color: rgba(var(--icon), 0.2);
    border: solid var(--border-small) rgba(var(--icon), 0.75);
}

/***** MINIMAP *****/

.MiniMap {
    position: absolute;
    background-color: rgba(var(--background-dark), 0.5);
    border: var(--border-small) solid rgba(var(--icon), 0.75);
    border-radius: var(--radius-large);
    bottom: var(--pad-large);
    right: var(--pad-large);
    width: 20%;
    height: 20%;
    z-index: 101; /* GraphMap */
    cursor: grab;
}

.MiniMapCanvas {
    position: absolute;
    width: 100%;
    height: 100%;
    margin: 0;
    outline: none;
}

.MiniMapResizers {
    position: absolute;
    width: calc(100% + var(--resize-size));
    height: calc(100% + var(--resize-size));
    margin: calc(var(--resize-size) / -2);
    outline: none;
}

/***** NODE *****/

.Node {
    pointer-events: all;
    position: absolute;
    background-color: transparent;
    border-radius: var(--radius-large);
    border: none;
    outline: solid var(--pad-micro) rgb(var(--black), 0.5);
    margin: 0;
    cursor: inherit;
    overflow: visible;
    z-index: 0; /* Node */
}

.Node:hover, .Node.NodeSelected {
    filter: brightness(120%);
}

.Node.NodeSelected {
    outline: solid var(--pad-small) rgb(var(--black), 0.5);
}

.Node.TooSmall .Resizer {
    pointer-events: none;
}

.NodePanel {
    pointer-events: none;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    background-color: rgba(var(--button-dark), 1);
    border-radius: var(--radius-large);
    position: absolute;
    left: 0; top: 0; right: 0; bottom: 0;
    margin: 0;
	padding: 0;
    cursor: inherit;
    overflow: visible;
    box-shadow: /* pop-out-shadow */
        inset var(--minus) var(--pixel) var(--pixel) var(--pixel) rgba(var(--white), 0.1),
        inset var(--pixel) var(--minus) var(--pixel) var(--pixel) rgba(var(--black), 0.1);
}

.NodeBorder {
    pointer-events: none;
    border: var(--border-small) solid transparent;
    border-radius: var(--radius-large);
    position: absolute;
    left: 0; top: 0; right: 0; bottom: 0;
    margin: calc(var(--border-small) * -0.5);
	padding: 0;
}

.Node.NodeSelected .NodeBorder {
    border: var(--border-small) solid rgba(var(--icon), 1);
}

.NodeResizers {
    pointer-events: all;
    position: absolute;
    opacity: 0;
    left: 0; top: 0; right: 0; bottom: 0;
    margin: calc(var(--resize-size) / -2);
    padding: 0;
}

/***** NODE HEADER *****/

.NodeHeaderTitle {
    pointer-events: none;
    position: relative;
    display: flex;
    flex-direction: row;
    align-items: center;
    background-image: linear-gradient(to bottom, rgba(var(--icon-light), 0.5), rgba(var(--icon-dark), 0.5));
    border-top-right-radius: var(--radius-large);
    border-top-left-radius: var(--radius-large);
    width: 100%;
    height: 1.82em;
    margin: 0;
    padding: var(--pad-x-small) 0.5em; /* vertical | horizontal */
    text-shadow: var(--minus) var(--pixel) rgba(var(--shadow), 0.5);
    box-shadow: /* pop-out-shadow */
        inset var(--minus) var(--pixel) var(--pixel) var(--pixel) rgba(var(--white), 0.1),
        inset var(--pixel) var(--minus) var(--pixel) var(--pixel) rgba(var(--black), 0.2);
}

.NodeHeaderIcon .VectorBox {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 85%;
    height: 85%;
    filter: drop-shadow(0 0 var(--pad-x-small) rgb(var(--shadow)));
}

.NodeHeaderIcon .Image {
    filter: brightness(calc(10 * var(--bright))) opacity(0.9);
}

.NodeHeaderIcon {
    pointer-events: none;
    position: absolute;
    background-color: rgba(var(--button-dark), 1);
    border-radius: 0.25em;
    left: 0.2em;
    top: 0.2em;
    width: 1.65em;
    height: 1.35em;
    opacity: 1;
    box-shadow: inset 0 0 var(--pixel) rgba(var(--shadow), 0.5);
}

.NodeHeaderText {
    pointer-events: none;
    flex-grow: 1;
    flex-shrink: 2;
    color: rgba(var(--text-light), 1.0);
    font-size: 100%;
    overflow: hidden;
    text-align: center;
    text-overflow: ellipsis;
    white-space: nowrap;
    padding-left: 0.5em;
}

/***** NODE ITEM *****/

.NodeInterior {
    pointer-events: none;
    display: flex;
    flex-direction: row;
    flex: 1 1 auto;
    position: relative;
    background-color: transparent;
    min-width: 100px;
    min-height: 25px;
}

.NodeItemList {
    pointer-events: none;
    display: block;
    flex: 1 1 auto;
    position: relative;
    background-color: transparent;
    width: 50%;
    min-height: 25px;
}

/* Item */
.NodeItem {
    pointer-events: none;
    position: relative;
    background-color: transparent;
    color: var(--text);
    font-size: 85%;
    width: 100%;
    padding: var(--pad-medium);
    margin-top: var(--pad-x-small);
    margin-bottom: var(--pad-x-small);
    vertical-align: middle;
}

.NodeLeft {
    text-align: left;
    padding-left: 1.2em;
}

.NodeRight {
    text-align: right;
    padding-right: 1.2em;
}

/* Item point */
.NodeItemPoint {
    pointer-events: all;
    position: absolute;
    width: 1em;
    height: 1em;
    background-color: rgba(var(--background-dark), 1);
    border: var(--border-small) solid rgba(var(--button-light), 1);
    border-radius: 0.3em;
    outline: none;
    top: 50%;
    overflow: visible;
    z-index: 100; /* NodeItemPoint */
}

/* Increases mouse over hit area */
.NodeItemPoint::after {
    content: ' ';
    position: absolute;
    left: 0; right: 0; top: 0; bottom: 0;
    margin: -0.5em;
    background-color: transparent;
}

.Node.NodeSelected .NodeItemPoint {
    border: var(--border-small) solid rgba(var(--icon), 1);
}

.NodeItemPoint.HoverPoint, .Node.NodeSelected .NodeItemPoint.HoverPoint,
.NodeItemPoint.ActiveItem, .Node.NodeSelected .NodeItemPoint.ActiveItem {
    border: var(--border-small) solid rgba(var(--highlight), 1);
    width: 1.2em;
    height: 1.2em;
}

.NodeLeft .NodeItemPoint {
    left: 0;
    transform: translate(-50%, -50%);
}

.NodeRight .NodeItemPoint {
    right: 0;
    transform: translate( 50%, -50%);
}

/* Item detacher */
.NodeItemDetach {
    display: none;
    pointer-events: none;
    position: absolute;
    width: 1em;
    height: 1em;
    left: calc(100% + 0.7em);
    top: 20%;
    background-color: transparent;
    border: none;
    outline: none;
    overflow: visible;
    opacity: 50%;
    transform: translateY(-50%) scale(100%);
}

.NodeItem.ItemConnected .NodeItemDetach {
    display: flex;
    pointer-events: all;
}

.NodeItem.ItemConnected .NodeItemDetach:hover {
    opacity: 100%;
}
